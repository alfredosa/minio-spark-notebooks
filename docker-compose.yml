version: '3.9'

services:
  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    env_file:
      - .env
    ports:
      - '5431:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - miniospark
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U miniospark"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    hostname: minio
    image: 'minio/minio'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --console-address ":9001"
    networks:
      - miniospark
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=eu-west-2
    networks:
      - miniospark
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "
    depends_on:
      minio:
        condition: service_healthy

  miniospark:
    build: miniospark/
    container_name: miniospark
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    volumes:
      - ./data/html:/var/lib/miniospark/html
      - ./data/stage:/var/lib/miniospark/stage
      - ./data/spark/notebooks:/var/lib/miniospark/notebooks
      - ./projects/dagster:/var/lib/miniospark/dagster
      - ./projects/dbt:/var/lib/miniospark/dbt
    ports:
      - '8888:8888' # Spark notebook port
      - '7077:7077' # Spark port
      - '8061:8061' # Spark master web ui port
      - '8062:8062' # Spark worker web ui port
      - '10000:10000' # Thrift ODBC/JDBC port
      - '10009:10009' # Kyuubi JDBC port
      - '18080:18080' # Spark history web ui port
    networks:
      miniospark:
        aliases:
          - spark
          - miniospark
    command:
      - notebook
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

volumes:
  postgres_data:

networks:
  miniospark:
    driver: bridge
